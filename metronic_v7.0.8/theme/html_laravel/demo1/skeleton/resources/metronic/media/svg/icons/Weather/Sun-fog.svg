);\n\t    },\n\t    _JOIN_STYLES: {\n\t      MITER: 0,\n\t      ROUND: 1,\n\t      BEVEL: 2\n\t    },\n\t    lineJoin: function(j) {\n\t      if (typeof j === 'string') {\n\t        j = this._JOIN_STYLES[j.toUpperCase()];\n\t      }\n\t      return this.addContent(\"\" + j + \" j\");\n\t    },\n\t    miterLimit: function(m) {\n\t      return this.addContent(\"\" + m + \" M\");\n\t    },\n\t    dash: function(length, options) {\n\t      var phase, space, _ref;\n\t      if (options == null) {\n\t        options = {};\n\t      }\n\t      if (length == null) {\n\t        return this;\n\t      }\n\t      space = (_ref = options.space) != null ? _ref : length;\n\t      phase = options.phase || 0;\n\t      return this.addContent(\"[\" + length + \" \" + space + \"] \" + phase + \" d\");\n\t    },\n\t    undash: function() {\n\t      return this.addContent(\"[] 0 d\");\n\t    },\n\t    moveTo: function(x, y) {\n\t      return this.addContent(\"\" + x + \" \" + y + \" m\");\n\t    },\n\t    lineTo: function(x, y) {\n\t      return this.addContent(\"\" + x + \" \" + y + \" l\");\n\t    },\n\t    bezierCurveTo: function(cp1x, cp1y, cp2x, cp2y, x, y) {\n\t      return this.addContent(\"\" + cp1x + \" \" + cp1y + \" \" + cp2x + \" \" + cp2y + \" \" + x + \" \" + y + \" c\");\n\t    },\n\t    quadraticCurveTo: function(cpx, cpy, x, y) {\n\t      return this.addContent(\"\" + cpx + \" \" + cpy + \" \" + x + \" \" + y + \" v\");\n\t    },\n\t    rect: function(x, y, w, h) {\n\t      return this.addContent(\"\" + x + \" \" + y + \" \" + w + \" \" + h + \" re\");\n\t    },\n\t    roundedRect: function(x, y, w, h, r) {\n\t      if (r == null) {\n\t        r = 0;\n\t      }\n\t      this.moveTo(x + r, y);\n\t      this.lineTo(x + w - r, y);\n\t      this.quadraticCurveTo(x + w, y, x + w, y + r);\n\t      this.lineTo(x + w, y + h - r);\n\t      this.quadraticCurveTo(x + w, y + h, x + w - r, y + h);\n\t      this.lineTo(x + r, y + h);\n\t      this.quadraticCurveTo(x, y + h, x, y + h - r);\n\t      this.lineTo(x, y + r);\n\t      return this.quadraticCurveTo(x, y, x + r, y);\n\t    },\n\t    ellipse: function(x, y, r1, r2) {\n\t      var ox, oy, xe, xm, ye, ym;\n\t      if (r2 == null) {\n\t        r2 = r1;\n\t      }\n\t      x -= r1;\n\t      y -= r2;\n\t      ox = r1 * KAPPA;\n\t      oy = r2 * KAPPA;\n\t      xe = x + r1 * 2;\n\t      ye = y + r2 * 2;\n\t      xm = x + r1;\n\t      ym = y + r2;\n\t      this.moveTo(x, ym);\n\t      this.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n\t      this.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n\t      this.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n\t      this.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n\t      return this.closePath();\n\t    },\n\t    circle: function(x, y, radius) {\n\t      return this.ellipse(x, y, radius);\n\t    },\n\t    polygon: function() {\n\t      var point, points, _i, _len;\
define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        base64: {
            default: 'Prosím zadajte správny base64',
        },
        between: {
            default: 'Prosím zadajte hodnotu medzi %s a %s',
            notInclusive: 'Prosím zadajte hodnotu medzi %s a %s (vrátane týchto čísel)',
        },
        bic: {
            default: 'Prosím zadajte správne BIC číslo',
        },
        callback: {
            default: 'Prosím zadajte správnu hodnotu',
        },
        choice: {
            between: 'Prosím vyberte medzi %s a %s',
            default: 'Prosím vyberte správnu hodnotu',
            less: 'Hodnota musí byť minimálne %s',
            more: 'Hodnota nesmie byť viac ako %s',
        },
        color: {
            default: 'Prosím zadajte správnu farbu',
        },
        creditCard: {
            default: 'Prosím zadajte správne číslo kreditnej karty',
        },
        cusip: {
            default: 'Prosím zadajte správne CUSIP číslo',
        },
        date: {
            default: 'Prosím zadajte správny dátum',
            max: 'Prosím zadajte dátum po %s',
            min: 'Prosím zadajte dátum pred %s',
            range: 'Prosím zadajte dátum v rozmedzí %s až %s',
        },
        different: {
            default: 'Prosím zadajte inú hodnotu',
        },
        digits: {
            default: 'Toto pole môže obsahovať len čísla',
        },
        ean: {
            default: 'Prosím zadajte správne EAN číslo',
        },
        ein: {
            default: 'Prosím zadajte správne EIN číslo',
        },
        emailAddress: {
            default: 'Prosím zadajte správnu emailovú adresu',
        },
        file: {
            default: 'Prosím vyberte súbor',
        },
        greaterThan: {
            default: 'Prosím zadajte hodnotu väčšiu alebo rovnú %s',
            notInclusive: 'Prosím zadajte hodnotu väčšiu ako %s',
        },
        grid: {
            default: 'Prosím zadajte správné GRId číslo',
        },
        hex: {
            default: 'Prosím zadajte správne hexadecimálne číslo',
        },
        iban: {
            countries: {
                AD: 'Andorru',
                AE: 'Spojené arabské emiráty',
                AL: 'Albánsko',
                AO: 'Angolu',
                AT: 'Rakúsko',
                AZ: 'Ázerbajdžán',
                BA: 'Bosnu a Herzegovinu',
                BE: 'Belgicko',
                BF: 'Burkina Faso',
                BG: 'Bulharsko',
                BH: 'Bahrajn',
                BI: 'Burundi',
                BJ: 'Benin',
                BR: 'Brazíliu',
                CH: 'Švajčiarsko',
                CI: 'Pobrežie Slonoviny',
                CM: 'Kamerun',
                CR: 'Kostariku',
                CV: 'Cape Verde',
                CY: 'Cyprus',
                CZ: 'Českú Republiku',
                DE: 'Nemecko',
                DK: 'Dánsko',
                DO: 'Dominikánsku republiku',
                DZ: 'Alžírsko',
                EE: 'Estónsko',
                ES: 'Španielsko',
                FI: 'Fínsko',
                FO: 'Faerské ostrovy',
                FR: 'Francúzsko',
                GB: 'Veľkú Britániu',
                GE: 'Gruzínsko',
                GI: 'Gibraltár',
                GL: 'Grónsko',
                GR: 'Grécko',
                GT: 'Guatemalu',
                HR: 'Chorvátsko',
                HU: 'Maďarsko',
                IE: 'Írsko',
                IL: 'Izrael',
                IR: 'Irán',
                IS: 'Island',
                IT: 'Taliansko',
                JO: 'Jordánsko',
                KW: 'Kuwait',
                KZ: 'Kazachstan',
                LB: 'Libanon',
                LI: 'Lichtenštajnsko',
                LT: 'Litvu',
                LU: 'Luxemburgsko',
                LV: 'Lotyšsko',
                MC: 'Monako',
                MD: 'Moldavsko',
                ME: 'Čiernu horu',
                MG: 'Madagaskar',
                MK: 'Macedónsko',
                ML: 'Mali',
                MR: 'Mauritániu',
                MT: 'Maltu',
                MU: 'Mauritius',
                MZ: 'Mosambik',
                NL: 'Holandsko',
                NO: 'Nórsko',
                PK: 'Pakistan',
                PL: 'Poľsko',
                PS: 'Palestínu',
                PT: 'Portugalsko',
                QA: 'Katar',
                RO: 'Rumunsko',
                RS: 'Srbsko',
                SA: 'Saudskú Arábiu',
                SE: 'Švédsko',
                SI: 'Slovinsko',
                SK: 'Slovensko',
                SM: 'San Marino',
                SN: 'Senegal',
                TL: 'Východný Timor',
                TN: 'Tunisko',
                TR: 'Turecko',
                VG: 'Britské Panenské ostrovy',
                XK: 'Republic of Kosovo',
            },
            country: 'Prosím zadajte správne IBAN číslo pre %s',
            default: 'Prosím zadajte správne IBAN číslo',
        },
        id: {
            countries: {
                BA: 'Bosnu a Hercegovinu',
                BG: 'Bulharsko',
                BR: 'Brazíliu',
                CH: 'Švajčiarsko',
                CL: 'Chile',
                CN: 'Čínu',
                CZ: 'Českú Republiku',
                DK: 'Dánsko',
                EE: 'Estónsko',
                ES: 'Španielsko',
                FI: 'Fínsko',
                HR: 'Chorvátsko',
                IE: 'Írsko',
                IS: 'Island',
                LT: 'Litvu',
                LV: 'Lotyšsko',
                ME: 'Čiernu horu',
                MK: 'Macedónsko',
                NL: 'Holandsko',
                PL: 'Poľsko',
                RO: 'Rumunsko',
                RS: 'Srbsko',
                SE: 'Švédsko',
                SI: 'Slovinsko',
                SK: 'Slovensko',
                SM: 'San Marino',
                TH: 'Thajsko',
                TR: 'Turecko',
                ZA: 'Južnú Afriku',
            },
            country: 'Prosím zadajte správne rodné číslo pre %s',
            default: 'Prosím zadajte správne rodné číslo',
        },
        identical: {
            default: 'Prosím zadajte rovnakú hodnotu',
        },
        imei: {
            default: 'Prosím zadajte správne IMEI číslo',
        },
        imo: {
            default: 'Prosím zadajte správne IMO číslo',
        },
        integer: {
            default: 'Prosím zadajte celé číslo',
        },
        ip: {
            default: 'Prosím zadajte správnu IP adresu',
            ipv4: 'Prosím zadajte správnu IPv4 adresu',
            ipv6: 'Prosím zadajte správnu IPv6 adresu',
        },
        isbn: {
            default: 'Prosím zadajte správne ISBN číslo',
        },
        isin: {
            default: 'Prosím zadajte správne ISIN číslo',
        },
        ismn: {
            default: 'Prosím zadajte správne ISMN číslo',
        },
        issn: {
            default: 'Prosím zadajte správne ISSN číslo',
        },
        lessThan: {
            default: 'Prosím zadajte hodnotu menšiu alebo rovnú %s',
            notInclusive: 'Prosím zadajte hodnotu menšiu ako %s',
        },
        mac: {
            default: 'Prosím zadajte správnu MAC adresu',
        },
        meid: {
            default: 'Prosím zadajte správne MEID číslo',
        },
        notEmpty: {
            default: 'Toto pole nesmie byť prázdne',
        },
        numeric: {
            default: 'Prosím zadajte číselnú hodnotu',
        },
        phone: {
            countries: {
                AE: 'Spojené arabské emiráty',
                BG: 'Bulharsko',
       OUGH_LENS+ENOUGH_DISTS);\n\n\tvar CODES = 0;\n\tvar LENS = 1;\n\tvar DISTS = 2;\n\n\tvar lbase = [ /* Length codes 257..285 base */\n\t  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n\t  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n\t];\n\n\tvar lext = [ /* Length codes 257..285 extra */\n\t  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n\t  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n\t];\n\n\tvar dbase = [ /* Distance codes 0..29 base */\n\t  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n\t  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n\t  8193, 12289, 16385, 24577, 0, 0\n\t];\n\n\tvar dext = [ /* Distance codes 0..29 extra */\n\t  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n\t  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n\t  28, 28, 29, 29, 64, 64\n\t];\n\n\tmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n\t{\n\t  var bits = opts.bits;\n\t      //here = opts.here; /* table entry for duplication */\n\n\t  var len = 0;               /* a code's length in bits */\n\t  var sym = 0;               /* index of code symbols */\n\t  var min = 0, max = 0;          /* minimum and maximum code lengths */\n\t  var root = 0;              /* number of index bits for root table */\n\t  var curr = 0;              /* number of index bits for current table */\n\t  var drop = 0;              /* code bits to drop for sub-table */\n\t  var left = 0;                   /* number of prefix codes available */\n\t  var used = 0;              /* code entries in table used */\n\t  var huff = 0;              /* Huffman code */\n\t  var incr;              /* for incrementing code, index */\n\t  var fill;              /* index for replicating entries */\n\t  var low;               /* low bits for current root entry */\n\t  var mask;              /* mask for low root bits */\n\t  var next;             /* next available space in table */\n\t  var base = null;     /* base value table to use */\n\t  var base_index = 0;\n\t//  var shoextra;    /* extra bits table to use */\n\t  var end;                    /* use base and extra for symbol > end */\n\t  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */\n\t  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */\n\t  var extra = null;\n\t  var extra_index = 0;\n\n\t  var here_bits, here_op, here_val;\n\n\t  /*\n\t   Process a set of code lengths to create a canonical Huffman code.  The\n\t   code lengths are lens[0..codes-1].  Each length corresponds to the\n\t   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n\t   symbols by length from short to long, and retaining the symbol order\n\t   for codes with equal lengths.  Then the code starts with all zero bits\n\t   for the first code of the shortest length, and the codes are integer\n\t   increments for the same length, and zeros are appended as the length\n\t   increases.  For the deflate format, these bits are stored backwards\n\t   from their more natural integer increment ordering, and so when the\n\t   decoding tables are built in the large loop below, the integer codes\n\t   are incremented backwards.\n\n\t   This routine assumes, but does not check, that all of the entries in\n\t   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n\t   1..MAXBITS is interpreted as that code length.  zero means that that\n\t   symbol does not occur in this code.\n\n\t   The codes are sorted by computing a count of codes for each length,\n\t   creating from that a table of starting indices for each length in the\n\t   sorted table, and then entering the symbols in order in the sorted\n\t   table.  The sorted table is work[], with that space being provided by\n\t   the caller.\n\n\t   The length counts are used for other purposes as well, i.e. finding\n\t   the minimum and maximum length codes, determining if there are any\n\t   codes at all, checking for a valid set of lengths, and looking ahead\n\t   at length counts to determine sub-table sizes when building the\n\t   decoding tables.\n\t   */\n\n\t  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n\t  for (len = 0; len <= MAXBITS; len++) {\n\t    count[len] = 0;\n\t  }\n\t  for (sym = 0; sym < codes; sym++) {\n\t    count[lens[lens_index + sym]]++;\n\t  }\n\n\t  /* bound code lengths, force root to be within code lengths */\n\t  root = bits;\n\t  for (max = MAXBITS; max >= 1; max--) {\n\t    if (count[max] !== 0) { break; }\n\t  }\n\t  if (root > max) {\n\t    root = max;\n\t  }\n\t  if (max === 0) {                     /* no symbols to code at all */\n\t    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invali
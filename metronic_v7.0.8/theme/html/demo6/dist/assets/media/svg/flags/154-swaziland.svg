<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
<g>
	<rect y="417.68" style="fill:#4173CD;" width="512" height="94.32"/>
	<rect style="fill:#4173CD;" width="512" height="94.32"/>
</g>
<rect y="94.32" style="fill:#FF4B55;" width="512" height="323.37"/>
<g>
	<rect y="80.84" style="fill:#FFE15A;" width="512" height="26.947"/>
	<rect y="404.21" style="fill:#FFE15A;" width="512" height="26.947"/>
	<path style="fill:#FFE15A;" d="M452.365,264.794H59.074c-2.375,0-4.3-1.925-4.3-4.3v-2.564c0-2.375,1.925-4.3,4.3-4.3h393.291   c2.375,0,4.3,1.925,4.3,4.3v2.564C456.665,262.869,454.739,264.794,452.365,264.794z"/>
</g>
<polygon style="fill:#F5F5F5;" points="375.728,242.467 395.265,234.094 414.801,242.467 395.265,250.839 "/>
<path style="fill:#FFE15A;" d="M380.535,238.9H93.847c-1.97,0-3.566,1.597-3.566,3.566s1.597,3.566,3.566,3.566h286.688  c1.97,0,3.566-1.597,3.566-3.566C384.101,240.497,382.504,238.9,380.535,238.9z"/>
<polygon style="fill:#F5F5F5;" points="396.04,222.93 415.576,214.557 435.113,222.93 415.576,231.303 "/>
<path style="fill:#FFE15A;" d="M400.846,219.364H114.158c-1.97,0-3.566,1.597-3.566,3.566s1.597,3.566,3.566,3.566h286.688  c1.97,0,3.566-1.597,3.566-3.566C404.413,220.961,402.816,219.364,400.846,219.364z"/>
<path style="fill:#F5F5F5;" d="M255.719,186.648c-49.577,0-92.831,28.075-115.997,69.773c23.166,41.698,66.42,69.773,115.997,69.773  s92.831-28.075,115.997-69.773C348.55,214.723,305.296,186.648,255.719,186.648z"/>
<path style="fill:#464655;" d="M139.722,256.421c23.166,41.698,66.42,69.773,115.997,69.773c8.279,0,16.359-0.85,24.221-2.348  c-6.003-13.176-27.113-13.153-28.408-18.119c-1.395-5.349,17.21-4.186,20.467-8.605c3.256-4.419-17.676-6.28-18.606-10.698  c-0.93-4.419,8.373-7.443,10.001-14.42s5.349-9.07,8.14-13.257c2.791-4.186-4.651-5.582-6.512-19.536  c-1.861-13.955-12.792-15.815-18.141-27.211c-5.349-11.396,3.256-19.769,8.838-25.351  C206.143,186.648,162.888,214.723,139.722,256.421z"/>
<g>
	<rect x="183.16" y="231.3" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="194.32" y="231.3" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="205.48" y="231.3" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="216.65" y="231.3" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="227.81" y="231.3" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="238.97" y="231.3" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="183.16" y="264.79" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="194.32" y="264.79" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="205.48" y="264.79" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="216.65" y="264.79" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="227.81" y="264.79" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
	<rect x="238.97" y="264.79" style="fill:#F5F5F5;" width="5.582" height="22.327"/>
</g>
<g>
	<rect x="266.88" y="231.3" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="278.05" y="231.3" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="289.21" y="231.3" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="300.37" y="231.3" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="311.54" y="231.3" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="322.7" y="231.3" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="266.88" y="264.79" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="278.05" y="264.79" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="289.21" y="264.79" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect x="300.37" y="264.79" style="fill:#464655;" width="5.582" height="22.327"/>
	<rect*\n\t     * @static\n\t     * @memberOf _\n\t     * @alias collect\n\t     * @category Collection\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [iteratee=_.identity] The function invoked\n\t     *  per iteration. If a property name or object is provided it is used to\n\t     *  create a \"_.property\" or \"_.matches\" style callback respectively.\n\t     * @param {*} [thisArg] The `this` binding of `iteratee`.\n\t     * @returns {Array} Returns the new mapped array.\n\t     * @example\n\t     *\n\t     * _.map([1, 2, 3], function(n) { return n * 3; });\n\t     * // => [3, 6, 9]\n\t     *\n\t     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(n) { return n * 3; });\n\t     * // => [3, 6, 9] (iteration order is not guaranteed)\n\t     *\n\t     * var users = [\n\t     *   { 'user': 'barney' },\n\t     *   { 'user': 'fred' }\n\t     * ];\n\t     *\n\t     * // using the \"_.property\" callback shorthand\n\t     * _.map(users, 'user');\n\t     * // => ['barney', 'fred']\n\t     */\n\t    function map(collection, iteratee, thisArg) {\n\t      var func = isArray(collection) ? arrayMap : baseMap;\n\t      iteratee = getCallback(iteratee, thisArg, 3);\n\t      return func(collection, iteratee);\n\t    }\n\n\t    /**\n\t     * Gets the maximum value of `collection`. If `collection` is empty or falsey\n\t     * `-Infinity` is returned. If an iteratee function is provided it is invoked\n\t     * for each value in `collection` to generate the criterion by which the value\n\t     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index, collection).\n\t     *\n\t     * If a property name is provided for `predicate` the created \"_.property\"\n\t     * style callback returns the property value of the given element.\n\t     *\n\t     * If an object is provided for `predicate` the created \"_.matches\" style\n\t     * callback returns `true` for elements that have the properties of the given\n\t     * object, else `false`.\n\t     *\n\t     * @static\n\t     * @memberOf _\n\t     * @category Collection\n\t     * @param {Array|Object|string} collection The collection to iterate over.\n\t     * @param {Function|Object|string} [iteratee] The function invoked per iteration.\n\t     *  If a property name or object is provided it is used to create a \"_.property\"\n\t     *  or \"_.matches\" style callback respectively.\n\t     * @param {*} [thisArg] The `this` binding of `iteratee`.\n\t     * @returns {*} Returns the maximum value.\n\t     * @example\n\t     *\n\t     * _.max([4, 2, 8, 6]);\n\t     * // => 8\n\t     *\n\t     * _.max([]);\n\t     * // => -Infinity\n\t     *\n\t     * var users = [\n\t     *   { 'user': 'barney', 'age': 36 },\n\t     *   { 'user': 'fred',   'age': 40 }\n\t     * ];\n\t     *\n\t     * _.max(users, function(chr) { return chr.age; });\n\t     * // => { 'user': 'fred', 'age': 40 };\n\t     *\n\t     * // using the \"_.property\" callback shorthand\n\t     * _.max(users, 'age');\n\t     * // => { 'user': 'fred', 'age': 40 };\n\t     */\n\t    var max = createExtremum(arrayMax);\n\n\t    /**\n\t     * Gets the minimum value of `collection`. If `collection` is empty or falsey\n\t     * `Infinity` is returned. If an iteratee function is provided it is invoked\n\t     * for each value in `collection` to generate the criterion by which the value\n\t     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three\n\t     * arguments; (value, index, collection).\n\t     *\n\t     * If a property name is provided for `predicate` the created \"_.property\"\n\t     * style callback returns the property value of the given element.\n\t     *\n\t     * If an object is provided for `predicate` the created \"_.matches\" style\n\t     * callback returns `true` for elements that have the properties of the given\n\t     * object, else `false`.\n\t     *\n\t     * @static\n\t    